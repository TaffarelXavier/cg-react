_95e‍.x([["ComponentRead",()=>ComponentRead],["ComponentCreate",()=>ComponentCreate],["ComponentEdit",()=>ComponentEdit],["FolderServices",()=>FolderServices],["FileConfigApi",()=>FileConfigApi]]);function sanitizeStringWithComma(fields) {
  fields = fields
    .split(',')
    .map((item) => {
      return item.trim();
    })
    .filter((item) => {
      return item.length;
    });
  return fields;
}

function nameCapitalized(field) {
  return field.charAt(0).toUpperCase() + field.slice(1);
}

       function ComponentRead(options) {
  let createTableArray = [...sanitizeStringWithComma(options.fields)];

  let componentName = options.componentName.toLowerCase() + 's';

  let content = `const [${componentName}, set${nameCapitalized(
    componentName
  )}] = useState("")\n
  
  const get${nameCapitalized(componentName)} = async () => {
    const { data } = await api.get('/${componentName}');
    setUsers([...${componentName}, data]);
  };

  useEffect(() => {
    get${nameCapitalized(componentName)}();
  }, []);\n`;

  content += `return <table className="table"><thead><tr>`;

  createTableArray.map((field) => {
    content += `<th>${field.toUpperCase()}</th>`;
  });

  content += `</tr></thead><tbody>`;

  content += `{(${componentName} || []).map(item => {
    return <tr key={item.id}>`;
  createTableArray.map((field) => {
    content += `<td>{item.${field.toLowerCase()}}</td>`;
  });
  content += `</tr>})}`;

  content += '</tbody></table>';
  return TemplateComponentReact(options, 'Read', content);
}

       function ComponentCreate(options) {
  let createTableArray = [...sanitizeStringWithComma(options.fields)];

  let componentName = options.componentName.toLowerCase() + 's';

  let content = `const [${componentName}, set${nameCapitalized(
    componentName
  )}] = useState("")\n
  
  const get${nameCapitalized(componentName)} = async () => {
    const { data } = await api.get('/${componentName}');
    setUsers([...${componentName}, data]);
  };

  useEffect(() => {
    get${nameCapitalized(componentName)}();
  }, []);\n`;

  content += `return <>`;

  createTableArray.map((field) => {
    content += `<input name="${field.toUpperCase()}" />`;
  });

  content += '</>';
  return TemplateComponentReact(options, 'Create', content);
}

       function ComponentEdit(options) {
  let data = `
  <div>

  </div>
  `;
  return TemplateComponentReact(options, 'Edit', data);
}

       function FolderServices() {
  let data = `import Config from './config';
  const axios = require("axios");
  
  const instance = axios.create({
    baseURL: Config.baseUrlApiRest
  });
  
  export default instance `;
  return data;
}

function TemplateComponentReact(options, crudName, data) {
  return `import React, { useState, useEffect } from 'react';
 import api from '../../services/axios';

 const ${options.componentName + crudName} = () => {
  ${data}
}

export default ${options.componentName + crudName};
 `;
}

       function FileConfigApi() {
  let data = `/**
  * ESTA CONFIGURAÇÃO SERVE PARA QUANDO ESTIVERMOS EM MODO DE DESENVOLVIMENTO
  * OU EM PRODUÇÃO OU EM USANDO OUTROS COMPUTADORES PARA CRIAR O SISTEMA.
  */
 const config = [
   {
     baseUrlApiRest: "http://192.168.129.171:3333",
   }
 ];
 
 const INDEX = 0; //Muda este número conforme seu dispositivo de implantação ou desenvolvimento.
 
//  Object.assign(config[INDEX], {
//    storage_firebase_url:
//      "https://firebasestorage.googleapis.com/v0/b/friendlychat-a879a.appspot.com/o/",
//  });
 
export default config[INDEX];`;
  return data;
}
